name: SpreadsheetにPull Requestの情報を送信
on:
  pull_request:
    types:
      - closed
jobs:
  getToken:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      token: ${{ env.TOKEN }}
    steps:
      - name: get token
        run: |
          curl \
            -d client_id=${{ secrets.GAS_CLIENT_ID }} \
            -d client_secret=${{ secrets.GAS_CLIENT_SECRET }} \
            -d refresh_token=${{ secrets.GAS_REFRESH_TOKEN }} \
            -d grant_type=refresh_token \
            "https://oauth2.googleapis.com/token" |
          jq -r '"TOKEN=\(.access_token)"' >> $GITHUB_ENV
  saveToSpreadSheet:
    needs: [getToken]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: post github info
        run: |
          gh api graphql -f id="${{ github.event.pull_request.node_id }}" -f query='
            query ($id: ID!) {
              node(id: $id) {
                ... on PullRequest {
                  repository {
                    name
                  }
                  title
                  author {
                    login
                  }
                  url
                  baseRefName
                  headRefName
                  commits(first: 1) {
                    nodes {
                      commit {
                        authoredDate
                      }
                    }
                  }
                  createdAt
                  mergedAt
                  additions
                  deletions
                  reviews(first: 1) {
                    nodes {
                      ... on PullRequestReview {
                        createdAt
                      }
                    }
                  }
                }
              }
            }
          ' |
          jq -r '.data.node |
            {
              function: "doPost",
              parameters: {
                data: {
                  repository: .repository.name,
                  title: .title,
                  user: .author.login,
                  url: .url,
                  base: .baseRefName,
                  head: .headRefName,
                  firstCommittedAt: .commits.nodes[0].commit.authoredDate,
                  createdAt: .createdAt,
                  firstReviewedAt: .reviews.nodes[0].createdAt,
                  mergedAt: .mergedAt,
                  additions: .additions,
                  deletions: .deletions
                },
                type: "lead_time"
              }
            } |
            @json' |
          curl -L \
            -H "Authorization: Bearer ${{ needs.getToken.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d @- \
            "${{ vars.GAS_API_URL }}"
